//SPDX-License-Identifier: MIT
pragma solidity 0.8.24;

//==============================================================================
//IMPORTS
//==============================================================================
import "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol";
import "lib/openzeppelin-contracts/contracts/access/AccessControl.sol";
import "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol";
import "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol";

/**
@title SyntheticToken
@notice This contract is used to create a synthetic token that is used to represent future yield that is generated by the protocol
*/
contract SyntheticToken is ERC20, ERC20Permit, ERC20Burnable, AccessControl {
    //==============================================================================
    //STATE VARIABLES
    //==============================================================================
    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");

    address[] public vaults;

    error VaultNotWhitelisted();

    modifier onlyWhitelistedVaults() {
        bool isWhitelisted = false;
        for (uint256 i = 0; i < vaults.length; i++) {
            if (vaults[i] == msg.sender) {
                isWhitelisted = true;
                break;
            }
        }
        if (!isWhitelisted) {
            revert VaultNotWhitelisted();
        }
        _;
    }

    //==============================================================================
    //CONSTRUCTOR
    //==============================================================================
    constructor(
        string memory _name,
        string memory _symbol,
        string memory _permit
    ) ERC20(_name, _symbol) ERC20Permit(_permit) {
        _grantRole(ADMIN_ROLE, msg.sender);
    }
}
